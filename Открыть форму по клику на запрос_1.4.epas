{@module
Author=Stark
Version=1.4
Description= Модуль открывает записи запроса при клике на указанном столбике.
@}

{@action
Id=59E17B88-182D-458B-86EA-ED9BD6CTQWRT
OrigName=QueryOpenOrCreateSource
Name=Открыть форму столбика запроса даблклик
Group=Запрос
ui=<ui>
  <query name="SQQ" caption="Запрос"/>
  <grid name="ButNul111" caption="Список компонентов">
      <form name="SQLformDT111" caption="Форма"/>
      <field name="SQLD" caption="Поле F1 формы" source="SQLformDT111"/>
      <field name="SQLD111" caption="Поле F1 в запросе" source="SQQ"/>
      <field name="SQLD1112" caption="*Столбик срабатывания" source="SQQ"  required="1"/>
      <expr name="Expr" caption="Выражение-фильтр для источника"/>
      <field name="SQLD34" caption="Столбик название формы в запросе" source="SQQ"/>
      <field name="SQLD342" caption="Столбик название поля в запросе" source="SQQ"/>
      <field name="SQLD122" caption="Столбик значения в запросе" source="SQQ"/>
  </grid>
</ui>
description= Открыват указанную форму при клике на определенном столбике запроса,
 если в нем есть запись по которой можно найти целевую запись источника.
<p>&nbsp;</p>
<p>1 параметр - форма Fm1 источник, которую будем открывать.</p>
<p>2 параметр - поле F1 формы по которому будем искать какую запись открывать.</p>
<p>3 параметр - поле где выводит F1 параметр в запросе, по нему будем искать.</p>
<p>4 параметр - столбик кликая на который мы приводим действие в работу.</p>
<p>5&nbsp; параметр - фильтр для поиска записей. Нужен для больших каталогов. Фильтр писать относительно формы&nbsp; Fm1 сравнивая с self. Потом записать в виде текста в расширение.</p>

 Для открытия разных форм на однин столбик добавлено 3 параметра (если они заполнены то параметры 1, 2, 3 можно не заполнять) -
 5й- столбик запроса где добавлено текстовое поле на форме в котором записано название формы.
 6й - поле в запросе где добавлено текстовое поле на форме в котором записано название поля по котором искать.
 7й - поле в запросе где добавлено поле 6, с него получаем значение для сравнения.

 Если они заполнены то на один столбик можно прикрепить разные формы и будет
 открывать по названию формы и поля в запросе сравнивая значение поля формы со значением указанным полем запроса.
 Для этого на каждой форме нужно создаь поля где будет записано название формы и поля с которым нужно работать запросу.
@}

function debb (s: string): string;
var fm: string;
begin
   if s<>'' then
   try
      debug('ошибка расширение="Открыть форму столбика запроса даблклик" описание="' + s + '"');
   except
      Debug('ошибка debb ' + ExceptionParam);
   end;
end;

type
    TQTData = record
    OnOnMouseUp: TMouseEvent;
    OnDbl: TNotifyEvent;
    FM: TVariantArray2d;
    TGQ: TdxQueryGrid;
    selfT: TdxForm;
  end;

var
  QTArr: array of TQTData;
  QT: TQTData;
  QT_OldDBClose: TNotifyEvent;
  sk: string;

// находим родительскую форму если на форме, если на кастумной то nil
function Get_Parent_Form (Q: TObject): TdxForm;
var qq: TControl; k: integer;
begin
  try
          result:= nil;
          qq:= TControl(TControl(Q).parent);
          sk:= qq.classname;
          k:= 0;

          while not (sk in ['TdxForm','TEditWindow']) do
          begin
               qq:= qq.parent;

               if qq<>nil then
               sk:= qq.classname;

               k:= k+1;
               if k>100 then
               exit;
          end;

          if sk='TdxForm' then
               result:= TdxForm(qq)
          else
          if sk='TEditWindow' then
               result:= TEditWindow(qq).form;

  except
     debb('PageC" ExceptionParam="' + ExceptionParam);
  end;
end;


function QT_GetIndex(o: TObject): Integer;
var  i, j: Integer; s: string; TT: TdxForm; qq: TObject;
begin
         try
             for i:=0 to Length(QTArr) - 1 do
             if  QTArr[i].TGQ =  TdxQueryGrid(o) then
             begin
                TT:= Get_Parent_Form(o);

                if TT<>nil then
                if  QTArr[i].selfT.Params['tagB'] =  TT.Params['tagB'] then
                begin
                      Result := i;
                      Exit;
                end;
             end;
         except debb('QT_GetIndex " ExceptionParam="' + ExceptionParam); end;
end;

procedure CheckVal (i: integer; QT: TQTData);
var T: TdxForm; j: integer; f: string; b: boolean; s1,s2: string;
begin
     try
                 b:= false;
                 if (vartostr(QT.FM[i][5])<>'') and (vartostr(QT.FM[i][6])<>'') and (vartostr(QT.FM[i][7])<>'') then
                 begin
                    f:= QT.TGQ[QT.FM[i][5]];
                    b:= true;
                 end
                 else
                 if vartostr(QT.FM[i][0])<>'' then
                    f:= QT.FM[i][0]
                 else
                 begin
                    debug('не заполнено параметры. Параметр 1,2 или параметры 5,6,7 должны быть заполнены.');
                    exit;
                 end;

             try
                 T:=TdxForm.Create(f);
                 if vartostr(QT.FM[i][4])<>'' then
                 T.OpenRecords(QT.FM[i][4], QT.selfT, false) // для больших каталогов сразу урезать значения по которым ищем
                 else
                 T.Open;

                 try
                 T.DisableControls;
                 T.DisableScrollEvents;
                 T.MoveLast;
                 T.MoveFirst;
                 finally
                 T.EnableControls;
                 T.EnableScrollEvents;
                 end;

                 if not b then
                 begin
                     s1:= QT.FM[i][1];
                     s2:= QT.FM[i][2];
                 end
                 else
                 begin
                     s1:= QT.FM[i][6];
                     s2:= QT.FM[i][7];
                 end;

                 if T.Locate(s1,[QT.TGQ[s2]],[]) then
                 begin
                       if not (T.state in [dsEdit,dsInsert]) and (T.CanEdit=asOk) then
                       T.Edit;
                       if T.EditWindow.ShowModal = mrOk then
                       begin
                        T.Post;
                        QT.TGQ.Refresh;
                       end
                       else
                        T.Cancel;
                 end;
             finally
                 if T<>nil then T.Free;
             end;
     except debb('CheckVal " ExceptionParam="' + ExceptionParam); end;
end;

function FindColName (QT: TQTData; X: integer): string;
var ArrG: array of integer; n, i, K: integer;  T1:TdxForm;
begin
      n:= QT.TGQ.Columns.Count;
      SetLength(ArrG, n);

      for i:=0 to n-1 do
      if i=0 then ArrG[i] :=  QT.TGQ.Columns[i].width else ArrG[i] :=  ArrG[i-1] + QT.TGQ.Columns[i].width;

      for i:=0 to n-1 do
      begin                                                              // Tb - глобальная переменная. Ее ловит в процедуре SQLQ
        if  i=0   then begin if  X<ArrG[i]                    then begin K:= i; break; end;  end else
        if  i>0   then begin if (X>ArrG[i-1]) and (X<ArrG[i]) then begin K:= i; break; end; end else
        if  i=n-1 then begin if  X>ArrG[i-1]                  then begin K:= i; break; end; end;
      end;
      result:= QT.TGQ.Columns[K].title.caption;
      SetLength(ArrG, 0);
end;

var jjj: integer;

procedure DoNil (Sender: TObject);  // зануляем открытие по двойному клику на столбиках что не указаны
var n: integer; QT: TQTData;
begin
   if jjj<>-1 then
   begin
      n:= QT_GetIndex (Sender);
      if n<>-1 then
      begin
          QT := QTArr[n];
          CheckVal(jjj, QT);
          jjj:= -1;
      end;
   end;
end;

procedure OpenD (Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var i,n: integer; QT: TQTData;
begin
 n:= QT_GetIndex (Sender);
 if n<>-1 then
 begin
 QT := QTArr[n];

 if (Button = mbLeft) and (Y > QT.TGQ.DefaultRowHeight) then
 begin
    for i:=0 to length(QT.FM) - 1 do
    begin
        if FindColName (QT, X)=QT.FM[i][3] then
        begin
       //   CheckVal(i, QT);
          jjj:= i;
          break;
        end;
    end;
 end;

 if QT.OnOnMouseUp<>nil then QT.OnOnMouseUp (Sender, Button, Shift, X, Y);
 end;
end;

procedure QT_DBClose(Sender: TObject);
begin
  SetLength(QTArr, 0);
  if QT_OldDBClose <> nil then QT_OldDBClose(Sender);
end;

function RandomB (a,b:Integer): Integer;
begin
  result:=0;
  while  (result<a) or (result>b) do
  result := a + Random(b);
end;

procedure QueryOpenOrCreateSource (TQ: string; FM: TVariantArray2d);
var
  n: Integer; QT: TQTData;
begin
  QT.selfT:= self;
  jjj:= -1;

  if not self.Params.ParamExists('tagB') then
  self.Params['tagB']:= randomB(10000, 9999999);

  QT.FM:= FM;
  QT.TGQ := self.Queries[TQ];

  QT.OnOnMouseUp:= QT.TGQ.OnMouseUp;
  QT.TGQ.OnMouseUp:=@OpenD;

  QT.OnDbl:= QT.TGQ.OnDblClick;
  QT.TGQ.OnDblClick:= @DoNil;

    n := Length(QTArr);
    if n = 0 then
    begin
       QT_OldDBClose := MainWindow.OnDatabaseClose;
       MainWindow.OnDatabaseClose := @QT_DBClose;
    end;

  SetLength(QTArr, n + 1);
  QTArr[n] := QT;
end;




